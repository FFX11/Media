@inject TMDBClient TMDB
@inject IJSRuntime JS
@inject NavigationManager Nav

@rendermode InteractiveServer


@if (Movie is not null)
{
    <div class="@darkOverlayClass" @onclick="CloseTrailerModal">
        <VideoModal @bind-IsModalVisible="isTrailerModalOpen" Title="Movie Trailer">
            @if (_video != null && _video.Results.Any())
            {
                var firstVideo = _video.Results.First();
                <iframe style="width:100%; height:600px" src="@($"https://www.youtube.com/embed/{firstVideo.Key}")" frameborder="0" allowfullscreen></iframe>
            }
            else
            {
                <p>No trailer available for this movie.</p>
            }
        </VideoModal>
    </div>

    <div class="movie-card-container position-relative">
        <a href="/movie/@Movie.Id" class="card h-100 fade-in" @ref="posterCardElement" @onmouseover="(()=> MouseOverId(Movie.Id))">
            @if (string.IsNullOrEmpty(Movie.PosterPath))
            {
                <img class="card-img-top" alt="Movie Poster" src="/images/PosterPlaceHolder.png" />
            }
            else
            {
                <div class="image-overlay">
                    <img class="card-img-top" alt="Movie Poster" src="@($"https://image.tmdb.org/t/p/w500/{Movie.PosterPath}")" />
                    <div class="text-overlay">
                        <h5 class="card-title" style="font-size:14px">@Movie.Title</h5>
                        <p class="type-box">
                            @DateTime.Parse(Movie.ReleaseDate).ToString("MMMM yyyy")
                        </p>
                        <!-- Additional information pop-up -->
                        <div class="additional-info-pop-up">
                            <button class="btn btn-primary" @onclick:preventDefault @onclick="OpenTrailerModal">Watch Trailer</button>
                            <p>Rating: @Movie.Popularity</p>
                            <!-- Add other information fields as needed -->
                        </div>
                    </div>
                </div>
            }
            <div class="play-button"></div>
        </a>
        <!-- Overlay for hover effect -->
    </div>
}
else
{
    <!-- Placeholder for empty movie -->
    <div class="card h-100">
        <img class="card-img-top" alt="Movie Poster" src="/images/PosterPlaceHolder.png" />
        <div class="play-button"></div>
        <div class="card-body border-top bg-light">
            <h5 class="card-title placeholder-glow">
                <span class="placeholder col-6"></span>
            </h5>
            <p class="card-text placeholder-glow">
                <span class="placeholder col-8"></span>
            </p>
        </div>
        <div class="card-footer text-end">
            <button class="btn btn-primary disabled placeholder col-6">
                Details
            </button>
        </div>
    </div>
}


@code {

    private ElementReference posterCardElement;

    [Parameter]
    public PopularMovie? Movie { get; set; }
    private VideoModel? _video;

    private int id;
    private bool isPopUpVisible = false;
    private bool isTrailerModalOpen = false;
    private string darkOverlayClass => isTrailerModalOpen ? "dark-overlay" : "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("VanillaTilt.init", posterCardElement, new
            {
                max = 15,
                speed = 300
            });
        }
    }

    private async void OpenTrailerModal()
    {
        isTrailerModalOpen = true;

        _video = await TMDB.GetMovieTrailersAsync(id);

        StateHasChanged();
    }

    public void Dispose()
    {
        JS.InvokeVoidAsync("VanillaTilt.destroy", posterCardElement);
    }
    
    private void CloseTrailerModal()
    {
        isTrailerModalOpen = false;
    }
    private void MouseOverId(int movieId)
    {
        id = movieId;
    }
}
